{"ts":1368643960220,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1368643915458,"patch":[[{"diffs":[[1,"<?php\n\nnamespace Insidebuzz\\Commands\\Company;\n\nuse Insidebuzz\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n//use Illuminate\\Database\\ConnectionResolverInterface as Resolver;\n\nclass Feed extends Command {\n    /**\n     * The console command name.\n     *\n     * @var string\n     */\n    protected $name = 'companies:feed';\n \n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = \"Manage the company news feed\";\n \n    /**\n     * Execute the console command.\n     *\n     * @return void\n     */\n    public function fire()\n    {\n        $action = $this->argument('action');\n        switch ($action) {\n            case 'scores':\n                $this->updateScores();\n                break;\n            case 'fetch':\n                $target = $this->argument('target');\n                switch ($target) {\n                    case 'facebook':\n                        $this->fetchFacebookNews();\n                        break;\n                    case 'twitter':\n                        $this->fetchTwitterNews();\n                        break;\n                    case 'google_news':\n                        $this->fetchGoogleNews();\n                        break;\n                    case 'all':\n                        $this->fetchFacebookNews();\n                        $this->fetchTwitterNews();\n                        $this->fetchGoogleNews();\n                        break;\n                    \n                    default:\n                        $this->error(\"Please choose a target. facebook|twitter|google_news|all\");\n                        break;\n                }\n                break;\n            case 'background':\n                $this->backgroundWorker();\n                break;\n            case 'clear':\n                $this->clearOldData();\n                break;\n            default:\n                $this->error(\"Command not recognised\");\n                break;\n        }\n    }\n\n    /**\n     * Get the console command arguments.\n     *\n     * @return array\n     */\n    protected function getArguments()\n    {\n        return array(\n            array('action', InputArgument::REQUIRED, 'The action to be performed. scores|fetch|background|clear'),\n            array('target', InputArgument::OPTIONAL, 'The feed to fetch. facebook|twitter|google_news|all'),\n        );\n    }\n\n    private function updateScores()\n    {\n        $this->line('Updating feed scores');\n        $feed = \\Insidebuzz\\Models\\Company\\Feed::all();\n        foreach ($feed as $item) {\n            $item->save();\n        }\n    }\n\n\n    private function fetchFacebookNews()\n    {\n        //When did this process last run?\n        $last_time = \\Insidebuzz\\Models\\Setting::get('feed_facebook_last_fetch');\n        \n        //Interesting stats to see what was created\n        $new_fb_items = 0;\n\n        $facebook = new \\Facebook(array(\n            'appId'  => '123994691029733',\n            'secret' => '6bc05d66c1db5b47e0b26ff30cff32a1',\n        ));\n        \n        //Go back an 48 hours so we can update existing stats\n        $last_time = $last_time - (60*60*24*2);\n        if ($last_time < 0)\n            $last_time = 0;\n\n        $this->line('Fetching latest Facebook news');\n        $companies = \\Insidebuzz\\Models\\Company::all();\n        foreach($companies as $company)\n        {\n            if ($company->facebook)\n            {\n                try {\n                    $page = $facebook->api('/'.$company->facebook);\n                    $page_feed = $facebook->api('/'.$page['id'].'/feed?since='.$last_time);\n                    $page_feed = $page_feed['data'];\n                } catch(\\Exception $e) {\n                    $page = false;\n                    $page_feed = false;\n                }\n\n                //print_r($page_feed);\n                if ($page_feed) foreach ($page_feed as $post)\n                {\n                    if (($post['from']['id'] == $page['id']) && isset($post['message']))\n                    {\n            //          $post['id'];\n            //          $post['message'];\n            //          $post['picture'];\n            //          $post['link'];\n            //          $post['name'];\n            //          $post['caption'];\n            //          $post['description'];\n            //          $post['icon'];\n            //          $post['type'];\n            //          $post['status_type'];\n            //          $post['created_time'];\n            //          $post['updated_time'];\n\n                        $comment_count = 0;\n                        if (isset($post['comments']['count']))\n                            $comment_count = $post['comments']['count'];\n                        $interaction_count = 0;\n                        if (isset($post['likes']['count']))\n                            $interaction_count = $post['likes']['count'];\n\n                        $fb_item_page = 'https://www.facebook.com/'.$post['id'];\n                        if ($post['type'] == 'photo')\n                            $fb_item_page = $post['link'];\n\n                        $picture = '';\n                        if (isset($post['picture']))\n                            $picture = $post['picture'];\n\n                        $link = '';\n                        if (isset($post['link']))\n                            $link = $post['link'];\n\n                        $feed_item = new \\Insidebuzz\\Models\\Company\\Feed();\n                        $feed_item->company_id          = $company->id;\n                        $feed_item->industry_id         = $company->industry->id;\n                        $feed_item->feed_source         = 'facebook';\n                        $feed_item->message             = $post['message'];\n                        $feed_item->original            = array(\n                            'id'    => $post['id'],\n                            'url'   => $fb_item_page,\n                            'name'  => 'Facebook'\n                        );\n                        $feed_item->comment_count       = $comment_count;\n                        $feed_item->interaction_count   = $interaction_count;\n                        $feed_item->link                = $link;\n                        $feed_item->date_posted         = strtotime($post['updated_time']);\n                        $feed_item->thumbnail           = array(\n                            'url'   => str_replace('_s.', '_b.', $picture),\n                            'width' => '600'\n                        );\n                        $feed_item->publisher           = array(\n                            'name'      => $post['from']['name'],\n                            'url'       => 'https://www.facebook.com/'.$post['from']['id'],\n                            'avatar'    => 'http://graph.facebook.com/'.$post['from']['id'].'/picture?return_ssl_resources=1&type=large',\n                            'followers' => (int)$page['likes']\n                        );\n                        //Not part of the post data - assume english\n                        $feed_item->language            = 'en';\n                    //  try{\n                            $feed_item->save();\n                            $new_fb_items++;\n                    //  } catch(Exception $e) {\n\n                    //  }\n                    }\n                }\n\n                \n            }\n\n        }\n\n        \\Insidebuzz\\Models\\Setting::set('feed_facebook_last_fetch', time());\n\n        $this->line('Processed '.$new_fb_items.' items');\n    }\n\n\n    public function fetchTwitterNews()\n    {\n        \n        //Interesting stats to see what was created\n        $new_twitter_items = 0;\n\n        $this->line('Fetching latest Twitter news');\n\n        $twitter = new \\TwitterOAuth\\Api('guKNulO5CAu4pl1KKh4jFw', 'YwIWyynMPUORnBEuWefoQpi6nMeMZDCuCptINx9sIYM', '9552162-HiahYTZHvAZnIQ5gZAHfMWTEczdOmdwHrYVq5KeafA', '94YLCWwxHGONwwRM2gQbLR1sY2JVBM1L45Ts5dJsM');\n\n        $companies = \\Insidebuzz\\Models\\Company::all();\n        foreach($companies as $company)\n        {\n            if ($company->twitter)\n            {\n                //Get the id of the last tweet so that we can limit the range of tweets we fetch\n                $since_id = 1;\n                $last_tweet = \\Insidebuzz\\Models\\Company\\Feed::where('feed_source', '=', 'twitter')->where('company_id', '=', $company->id)->orderBy('date_posted', 'DESC')->first();\n                if ($last_tweet)\n                    $since_id = $last_tweet->original->id;\n\n                //Fetch the companies tweets\n                $tweets = $twitter->get('statuses/user_timeline', array('screen_name'=>$company->twitter, 'exclude_replies'=>true, 'since_id'=>$since_id));\n\n                foreach ($tweets as $tweet)\n                {\n                    $feed_item = new \\Insidebuzz\\Models\\Company\\Feed();\n                    $feed_item->company_id          = $company->id;\n                    $feed_item->industry_id         = $company->industry->id;\n                    $feed_item->feed_source         = 'twitter';\n                    \n                    \n                    //Is this just a retweet - fetch the origional tweet\n                    if (isset($tweet->retweeted_status))\n                    {\n                        $tweet = $tweet->retweeted_status;\n                    }\n\n                    if (is_object($tweet))\n                    {\n                        $feed_item->message             = $tweet->text;\n\n                        //Save the users language - make do for the tweet language\n                        $feed_item->language            = $tweet->user->lang;\n\n                        $feed_item->original            = array(\n                            'id'    => $tweet->id_str,\n                            'url'   => 'https://twitter.com/'.$tweet->user->screen_name.'/status/'.$tweet->id_str,\n                            'name'  => 'Twitter'\n                        );\n\n                        $feed_item->link = '';\n                        if (is_array($tweet->entities->urls) && count($tweet->entities->urls) > 0)\n                            $feed_item->link = $tweet->entities->urls[0]->expanded_url;\n\n\n                        $feed_item->publisher           = array(\n                            'name'      => $tweet->user->name,\n                            'url'       => 'https://twitter.com/'.$tweet->user->screen_name,\n                            'avatar'    => str_replace('_normal', '_bigger', $tweet->user->profile_image_url_https),\n                            'followers' => $tweet->user->followers_count\n                        );\n                        \n                        $feed_item->thumbnail           = array();\n                        //See if we have an image\n                        if (isset($tweet->entities->media) && count($tweet->entities->media) > 0) {\n                            $feed_item->thumbnail           = array(\n                                'url'   => $tweet->entities->media[0]->media_url_https,\n                                'width' => '100'\n                            );\n                        }\n                        \n                        \n                        $feed_item->comment_count       = 0;\n                        $feed_item->interaction_count   = $tweet->favorite_count + $tweet->retweet_count;\n                        $feed_item->date_posted         = strtotime($tweet->created_at);\n                        \n\n                        try{\n                            $feed_item->save();\n                            $new_twitter_items++;\n                        } catch(\\Exception $e) {\n\n                        }\n                    }\n                }\n            }\n        }\n\n        $this->line('Processed '.$new_twitter_items.' items');\n    }\n\n\n    public function fetchTwitterStats()\n    {\n\n        $this->line('Updating Twitter stats');\n\n        $twitter = new \\TwitterOAuth\\Api('guKNulO5CAu4pl1KKh4jFw', 'YwIWyynMPUORnBEuWefoQpi6nMeMZDCuCptINx9sIYM', '9552162-HiahYTZHvAZnIQ5gZAHfMWTEczdOmdwHrYVq5KeafA', '94YLCWwxHGONwwRM2gQbLR1sY2JVBM1L45Ts5dJsM');\n\n        $feed = \\Insidebuzz\\Models\\Company\\Feed::where('feed_source', '=', 'twitter')->orderBy('date_posted', 'DESC')->take(500)->get();\n        foreach ($feed as $item) {\n            $stats = $twitter->get('https://api.twitter.com/i/statuses/'.$item->original->id.'/activity/summary.json');\n\n            if ($stats && isset($stats->repliers_count)) {\n                $item->comment_count = (int)$stats->repliers_count;\n                $item->interaction_count = (int)($stats->favoriters_count + $stats->retweeters_count);\n\n                $item->save();\n            } elseif (isset($stats->errors) && (count($stats->errors) > 0)) {\n                //twitter api error\n                //errors is an array of objects with a message and a code property\n            } else {\n                print_r($item);\n                print_r($stats);\n            }\n        }\n    }\n\n\n    public function fetchGoogleNews()\n    {\n        //When did this process last run?\n    //  $last_time = Insidebuzz\\Models\\Setting::get('company_feed_last_fetch');\n        \n        //Interesting stats to see what was created\n        $new_rss_items = 0;\n\n        $this->line('Fetching latest news from Google News');\n        $companies = \\Insidebuzz\\Models\\Company::all();\n        foreach($companies as $company)\n        {\n            if ($company->news_search_term) {\n                $feed = new \\SimplePie();\n                $feed->set_feed_url('http://news.google.com/news?hl=en&gl=uk&q=%22'.urlencode($company->news_search_term).'%22&output=rss');\n                $feed->enable_cache(false);\n                $feed->init();\n                $items = $feed->get_items();\n                foreach ($items as $item)\n                {\n                    $feed_item = new \\Insidebuzz\\Models\\Company\\Feed();\n                    $feed_item->company_id          = $company->id;\n                    $feed_item->industry_id         = $company->industry->id;\n                    $feed_item->feed_source         = 'google_news';\n                    $feed_item->language            = 'en';\n\n                    $feed_item->date_posted         = strtotime($item->get_date());\n                    $feed_item->link                = $item->get_permalink();\n                    $feed_item->message             = strip_tags($item->get_description());\n\n                    $title_parts = explode(' - ', $item->get_title());\n                    \n\n                    $feed_item->original            = array(\n                        'id'    => $item->get_id(),\n                        'url'   => $item->get_permalink(),\n                        'name'  => 'Google News'\n                    );\n\n                    $feed_item->publisher           = array(\n                        'name'  => $title_parts[count($title_parts)-1],\n                        'url'   => null,\n                        'avatar'=> null\n                    );\n\n                    try {\n                        $feed_item->save();\n                        $new_rss_items++;\n                    } catch(\\Exception $e) {\n\n                    }\n                }\n            }\n            \n        }\n\n    //  Insidebuzz\\Models\\Setting::set('company_feed_last_fetch', time());\n\n        $this->line('Processed '.$new_rss_items.' items');\n    }\n\n    private function clearOldData()\n    {\n        $this->line('Clearing old feed items');\n\n        $old_time = time() - (60 * 60 * 24 * 5);    //Go back 5 days\n\n        \\Insidebuzz\\Models\\Company\\Feed::where('date_posted', '<', $old_time)->delete();\n\n    }\n\n    private function backgroundWorker()\n    {\n        $this->line('Ready to process jobs');\n        $this->line('Starting background worker');\n\n        $minute_00 = false;\n        $minute_15 = false;\n        $minute_30 = false;\n        $minute_45 = false;\n\n        $current_hour = date('G');\n\n        $fetch = false;\n        $long_fetch = false;\n        $very_long_fetch = false;\n\n        while(1) {\n\n            $this->line('Looping');\n\n            if ((date('i') > 0) && !$minute_00) {\n                $fetch = true;\n                $long_fetch = true;\n                $very_long_fetch = true;\n                $minute_00 = true;  //Check performed - clear to the next hour\n            }\n\n            if ((date('i') > 15) && !$minute_15) {\n                $fetch = true;\n                $minute_15 = true;\n            }\n\n            if ((date('i') > 30) && !$minute_30) {\n                $fetch = true;\n                $long_fetch = true;\n                $minute_30 = true;\n            }\n\n            if ((date('i') > 45) && !$minute_45) {\n                $fetch = true;\n                $minute_45 = true;\n            }\n\n            //Fetch the main feeds every 15 minutes\n            if ($fetch) {\n                $this->line('Performing 15 minute fetch');\n                $this->fetchFacebookNews();\n                $this->fetchTwitterNews();\n            }\n\n            //Update the twitter stats every half hour\n            if ($long_fetch) {\n                $this->line('Performing 30 minute fetch');\n                $this->fetchTwitterStats();\n\n                //$this->fetchGoogleNews();\n\n                $long_fetch = false;\n            }\n\n            if ($very_long_fetch) {\n                $this->clearOldData();\n                $very_long_fetch = false;\n            }\n            \n            //Update the scores every minute\n            $this->updateScores();\n\n            //Have we moved onto the next hour\n            if ($current_hour !== date('G')) {\n\n                $this->line('Started the next hour');\n\n                $current_hour = date('G');\n\n                $minute_00 = false;\n                $minute_15 = false;\n                $minute_30 = false;\n                $minute_45 = false;\n            }\n\n\n            sleep(60);\n        }\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":17895}]],"length":17895,"saved":false}
