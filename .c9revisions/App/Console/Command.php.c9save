{"ts":1368643870082,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1368643821344,"patch":[[{"diffs":[[1,"<?php\n\nnamespace App\\Console;\n\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Output\\NullOutput;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass Command extends \\Symfony\\Component\\Console\\Command\\Command {\n\n\n    /**\n     * The input interface implementation.\n     *\n     * @var Symfony\\Component\\Console\\Input\\InputInterface\n     */\n    protected $input;\n\n    /**\n     * The output interface implementation.\n     *\n     * @var Symfony\\Component\\Console\\Output\\OutputInterface\n     */\n    protected $output;\n\n    /**\n     * The console command name.\n     *\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description;\n\n    /**\n     * Create a new console command instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct($this->name);\n\n        // We will go ahead and set the name, description, and parameters on console\n        // commands just to make things a little easier on the developer. This is\n        // so they don't have to all be manually specified in the constructors.\n        $this->setDescription($this->description);\n\n        $this->specifyParameters();\n    }\n\n    /**\n     * Specify the arguments and options on the command.\n     *\n     * @return void\n     */\n    protected function specifyParameters()\n    {\n        // We will loop through all of the arguments and options for the command and\n        // set them all on the base command instance. This specifies what can get\n        // passed into these commands as \"parameters\" to control the execution.\n        foreach ($this->getArguments() as $arguments)\n        {\n            call_user_func_array(array($this, 'addArgument'), $arguments);\n        }\n\n        foreach ($this->getOptions() as $options)\n        {\n            call_user_func_array(array($this, 'addOption'), $options);\n        }\n    }\n\n    /**\n     * Run the console command.\n     *\n     * @param  Symfony\\Component\\Console\\Input\\InputInterface  $input\n     * @param  Symfony\\Component\\Console\\Output\\OutputInterface  $output\n     * @return integer\n     */\n    public function run(InputInterface $input, OutputInterface $output)\n    {\n        $this->input = $input;\n\n        $this->output = $output;\n\n        return parent::run($input, $output);\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @param  Symfony\\Component\\Console\\Input\\InputInterface  $input\n     * @param  Symfony\\Component\\Console\\Output\\OutputInterface  $output\n     * @return mixed\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        return $this->fire();\n    }\n\n    /**\n     * Call another console command.\n     *\n     * @param  string  $command\n     * @param  array   $arguments\n     * @return integer\n     */\n    public function call($command, array $arguments = array())\n    {\n        $instance = $this->getApplication()->find($command);\n\n        $arguments['command'] = $command;\n\n        return $instance->run(new ArrayInput($arguments), $this->output);\n    }\n\n    /**\n     * Call another console command silently.\n     *\n     * @param  string  $command\n     * @param  array   $arguments\n     * @return integer\n     */\n    public function callSilent($command, array $arguments = array())\n    {\n        $instance = $this->getApplication()->find($command);\n\n        $arguments['command'] = $command;\n\n        return $instance->run(new ArrayInput($arguments), new NullOutput);  \n    }\n\n    /**\n     * Get the value of a command argument.\n     *\n     * @param  string  $key\n     * @return string|array\n     */\n    public function argument($key = null)\n    {\n        if (is_null($key)) return $this->input->getArguments();\n\n        return $this->input->getArgument($key);\n    }\n\n    /**\n     * Get the value of a command option.\n     *\n     * @param  string  $key\n     * @return string|array\n     */\n    public function option($key = null)\n    {\n        if (is_null($key)) return $this->input->getOptions();\n\n        return $this->input->getOption($key);\n    }\n\n    /**\n     * Confirm a question with the user.\n     *\n     * @param  string  $question\n     * @param  bool    $default\n     * @return bool\n     */\n    public function confirm($question, $default = true)\n    {\n        $dialog = $this->getHelperSet()->get('dialog');\n\n        return $dialog->askConfirmation($this->output, \"<question>$question</question>\", $default);\n    }\n\n    /**\n     * Prompt the user for input.\n     *\n     * @param  string  $question\n     * @param  string  $default\n     * @return string\n     */\n    public function ask($question, $default = null)\n    {\n        $dialog = $this->getHelperSet()->get('dialog');\n\n        return $dialog->ask($this->output, \"<question>$question</question>\", $default);\n    }\n\n    /**\n     * Prompt the user for input but hide the answer from the console.\n     *\n     * @param  string  $question\n     * @param  string  $default\n     * @return string\n     */\n    public function secret($question, $default = null)\n    {\n        $dialog = $this->getHelperSet()->get('dialog');\n\n        return $dialog->askHiddenResponse($this->output, \"<question>$question</question>\", $default);\n    }\n\n    /**\n     * Write a string as standard output.\n     *\n     * @param  string  $string\n     * @return void\n     */\n    public function line($string)\n    {\n        $this->output->writeln($string);\n    }\n\n    /**\n     * Write a string as information output.\n     *\n     * @param  string  $string\n     * @return void\n     */\n    public function info($string)\n    {\n        $this->output->writeln(\"<info>$string</info>\");\n    }\n\n    /**\n     * Write a string as comment output.\n     *\n     * @param  string  $string\n     * @return void\n     */\n    public function comment($string)\n    {\n        $this->output->writeln(\"<comment>$string</comment>\");\n    }\n\n    /**\n     * Write a string as question output.\n     *\n     * @param  string  $string\n     * @return void\n     */\n    public function question($string)\n    {\n        $this->output->writeln(\"<question>$string</question>\");\n    }\n\n    /**\n     * Write a string as error output.\n     *\n     * @param  string  $string\n     * @return void\n     */\n    public function error($string)\n    {\n        $this->output->writeln(\"<error>$string</error>\");\n    }\n\n    /**\n     * Get the console command arguments.\n     *\n     * @return array\n     */\n    protected function getArguments()\n    {\n        return array();\n    }\n\n    /**\n     * Get the console command options.\n     *\n     * @return array\n     */\n    protected function getOptions()\n    {\n        return array();\n    }\n\n    /**\n     * Get the output implementation.\n     *\n     * @return Symfony\\Component\\Console\\Output\\OutputInterface\n     */\n    public function getOutput()\n    {\n        return $this->output;\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":6941}]],"length":6941,"saved":false}
